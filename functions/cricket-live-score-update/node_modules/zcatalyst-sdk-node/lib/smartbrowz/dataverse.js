"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _Dataverse_requester, _Dataverse_baseUri;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dataverse = void 0;
const constants_1 = __importDefault(require("../utils/constants"));
const { REQ_METHOD, CREDENTIAL_USER } = constants_1.default;
class Dataverse {
    constructor({ requester, baseUri }) {
        _Dataverse_requester.set(this, void 0);
        _Dataverse_baseUri.set(this, void 0);
        __classPrivateFieldSet(this, _Dataverse_requester, requester, "f");
        __classPrivateFieldSet(this, _Dataverse_baseUri, baseUri, "f");
    }
    getEnrichedLead({ websiteUrl, leadName, email }) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = {};
            if (websiteUrl !== undefined) {
                data.website_url = websiteUrl;
            }
            if (leadName !== undefined) {
                data.lead_name = leadName;
            }
            if (email !== undefined) {
                data.email = email;
            }
            const request = {
                method: REQ_METHOD.post,
                path: __classPrivateFieldGet(this, _Dataverse_baseUri, "f") + '/dataverse/lead-enrichment',
                type: "json" /* RequestType.JSON */,
                expecting: "json" /* ResponseType.JSON */,
                data,
                catalyst: false,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield __classPrivateFieldGet(this, _Dataverse_requester, "f").send(request);
            return resp.data.data;
        });
    }
    findTechStack(websiteUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = {
                method: REQ_METHOD.post,
                path: __classPrivateFieldGet(this, _Dataverse_baseUri, "f") + '/dataverse/tech-stack-finder',
                type: "json" /* RequestType.JSON */,
                expecting: "json" /* ResponseType.JSON */,
                data: { website_url: websiteUrl },
                catalyst: false,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield __classPrivateFieldGet(this, _Dataverse_requester, "f").send(request);
            return resp.data.data;
        });
    }
    getSimilarCompanies({ websiteUrl, leadName }) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = {};
            if (websiteUrl !== undefined) {
                data.website_url = websiteUrl;
            }
            if (leadName !== undefined) {
                data.lead_name = leadName;
            }
            const request = {
                method: REQ_METHOD.post,
                path: __classPrivateFieldGet(this, _Dataverse_baseUri, "f") + '/dataverse/similar-companies',
                type: "json" /* RequestType.JSON */,
                expecting: "json" /* ResponseType.JSON */,
                data,
                catalyst: false,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield __classPrivateFieldGet(this, _Dataverse_requester, "f").send(request);
            return resp.data.data;
        });
    }
}
exports.Dataverse = Dataverse;
_Dataverse_requester = new WeakMap(), _Dataverse_baseUri = new WeakMap();
