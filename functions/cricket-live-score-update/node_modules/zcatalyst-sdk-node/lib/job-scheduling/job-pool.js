"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = __importDefault(require("../utils/constants"));
const constants_2 = __importDefault(require("./constants"));
const validator_1 = require("../utils/validator");
const error_1 = __importDefault(require("./error"));
const enum_1 = require("./enum");
const { COMPONENT, REQ_METHOD, CREDENTIAL_USER } = constants_1.default;
class Jobpool {
    constructor(jobSchedulingInstance, jobpoolDetails) {
        this._jobpoolDetails = jobpoolDetails;
        this.requester = jobSchedulingInstance.requester;
    }
    getComponentName() {
        return COMPONENT.job_scheduling;
    }
    // async getAllJobs(): Promise<Array<ICatalystJobDetails>> {
    //      no support for this currently from server side
    // }
    /**
     * Get a job's details from the jobpool
     * @param id Id of the job
     * @returns details of the job
     */
    getJob(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = {
                method: REQ_METHOD.get,
                path: constants_2.default.API.JOB + '/' + id,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
    /**
     * Submit a job to the jobpool
     * @param jobMeta details of the job to be submitted to the jobpool
     * @returns details of the submitted job
     */
    submitJob(jobMeta) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonNullObject)(jobMeta, 'job_meta', true);
            }, error_1.default);
            jobMeta.jobpool_id = jobMeta.jobpool_id || this._jobpoolDetails.id; // giving precedence to explicit set
            jobMeta.jobpool_name = jobMeta.jobpool_name || this._jobpoolDetails.name; // giving precedence to explicit set
            jobMeta.source_type = enum_1.JOB_SOURCE_TYPE.API;
            const request = {
                method: REQ_METHOD.post,
                path: constants_2.default.API.JOB,
                data: jobMeta,
                type: "json" /* RequestType.JSON */,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
    /**
     * Delete a job from the job pool
     * @param jobId Id of the job to be deleted
     * @returns details of the deleted job
     */
    deleteJob(jobId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyStringOrNumber)(jobId, 'job_id', true);
            }, error_1.default);
            const request = {
                method: REQ_METHOD.delete,
                path: constants_2.default.API.JOB + '/' + jobId,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
    /**
     * Returns a string of jobpool details
     * @returns
     */
    toString() {
        return JSON.stringify(this._jobpoolDetails);
    }
    /**
     * Returns the jobpool details as a plain js object
     * @returns
     */
    toJSON() {
        return this._jobpoolDetails;
    }
}
exports.default = Jobpool;
