"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = __importDefault(require("../utils/constants"));
const validator_1 = require("../utils/validator");
const error_1 = __importDefault(require("./error"));
const constants_2 = __importDefault(require("./constants"));
const enum_1 = require("./enum");
const { REQ_METHOD, CREDENTIAL_USER } = constants_1.default;
class Cron {
    constructor(requester) {
        this.requester = requester;
    }
    /**
     * Get all cron details
     * @returns
     */
    getAllCron() {
        return __awaiter(this, void 0, void 0, function* () {
            const request = {
                method: REQ_METHOD.get,
                path: constants_2.default.API.CRON,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
    /**
     * Get cron details
     * @param cronId
     * @returns
     */
    getCron(cronId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyString)(cronId, 'cron_id', true);
            }, error_1.default);
            const request = {
                method: REQ_METHOD.get,
                path: constants_2.default.API.CRON + '/' + cronId,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
    /**
     * Create a new Dynamic cron
     * @param cronDetails Details of the cron based on the type of cron
     * @returns
     */
    createCron(cronDetails) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonNullObject)(cronDetails, 'cron_details', true);
            }, error_1.default);
            if (cronDetails.job_meta && !cronDetails.job_meta.source_type) {
                cronDetails.job_meta.source_type = enum_1.JOB_SOURCE_TYPE.CRON;
            }
            cronDetails.cron_execution_type = enum_1.CRON_EXECUTION_TYPE.DYNAMIC;
            const request = {
                method: REQ_METHOD.post,
                path: constants_2.default.API.CRON,
                data: cronDetails,
                type: "json" /* RequestType.JSON */,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
    /**
     * Update a dynamic repetitive crons.
     * @param cronId ID or name of the cron to be updated
     * @param cronDetails Details to be updated based on the type of cron
     * @returns
     */
    updateCron(cronId, cronDetails) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyString)(cronId, 'cron_id', true);
                (0, validator_1.isNonEmptyObject)(cronDetails, 'cron_details', true);
            }, error_1.default);
            if (cronDetails.job_meta && !cronDetails.job_meta.source_type) {
                cronDetails.job_meta.source_type = enum_1.JOB_SOURCE_TYPE.CRON;
            }
            const request = {
                method: REQ_METHOD.put,
                path: constants_2.default.API.CRON + '/' + cronId,
                data: cronDetails,
                type: "json" /* RequestType.JSON */,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
    /**
     * Disable a running cron
     * @param cronId ID or name of the cron to be disabled
     * @returns
     */
    pauseCron(cronId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyString)(cronId, 'cron_id', true);
            }, error_1.default);
            const data = {
                cron_status: false
            };
            const request = {
                method: REQ_METHOD.patch,
                path: constants_2.default.API.CRON + '/' + cronId,
                data,
                type: "json" /* RequestType.JSON */,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
    /**
     * Enable a disabled cron
     * @param cronId ID or name of the cron to be enabled
     * @returns
     */
    resumeCron(cronId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyString)(cronId, 'cron_id', true);
            }, error_1.default);
            const data = {
                cron_status: true
            };
            const request = {
                method: REQ_METHOD.patch,
                path: constants_2.default.API.CRON + '/' + cronId,
                data,
                type: "json" /* RequestType.JSON */,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
    /**
     * Execute the cron immediately.
     * @param cronId ID or name of the cron to run
     * @returns
     */
    runCron(cronId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyString)(cronId, 'cron_id', true);
            }, error_1.default);
            const request = {
                method: REQ_METHOD.post,
                path: constants_2.default.API.CRON + `/${cronId}/submit_job`,
                type: "json" /* RequestType.JSON */,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
    /**
     * Delete a dynamic cron
     * @param cronId ID or name of the corn to be deleted
     * @returns
     */
    deleteCron(cronId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyString)(cronId, 'cron_id', true);
            }, error_1.default);
            const request = {
                method: REQ_METHOD.delete,
                path: constants_2.default.API.CRON + '/' + cronId,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            return resp.data.data;
        });
    }
}
exports.default = Cron;
