import { AuthorizedHttpClient } from '../utils/api-request';
import { ICatalystCronDetails, ICatalystJobDetails, TCatalystCron, TCatalystJobs } from './types';
export default class Cron {
    requester: AuthorizedHttpClient;
    constructor(requester: AuthorizedHttpClient);
    /**
     * Get all cron details
     * @returns
     */
    getAllCron(): Promise<Array<ICatalystCronDetails>>;
    /**
     * Get cron details
     * @param cronId
     * @returns
     */
    getCron(cronId: string): Promise<ICatalystCronDetails>;
    /**
     * Create a new Dynamic cron
     * @param cronDetails Details of the cron based on the type of cron
     * @returns
     */
    createCron(cronDetails: TCatalystCron): Promise<ICatalystCronDetails>;
    /**
     * Update a dynamic repetitive crons.
     * @param cronId ID or name of the cron to be updated
     * @param cronDetails Details to be updated based on the type of cron
     * @returns
     */
    updateCron(cronId: string, cronDetails: ICatalystCronDetails): Promise<ICatalystCronDetails>;
    /**
     * Disable a running cron
     * @param cronId ID or name of the cron to be disabled
     * @returns
     */
    pauseCron(cronId: string): Promise<ICatalystCronDetails>;
    /**
     * Enable a disabled cron
     * @param cronId ID or name of the cron to be enabled
     * @returns
     */
    resumeCron(cronId: string): Promise<ICatalystCronDetails>;
    /**
     * Execute the cron immediately.
     * @param cronId ID or name of the cron to run
     * @returns
     */
    runCron<T extends TCatalystJobs>(cronId: string): Promise<ICatalystJobDetails<T>>;
    /**
     * Delete a dynamic cron
     * @param cronId ID or name of the corn to be deleted
     * @returns
     */
    deleteCron(cronId: string): Promise<ICatalystCronDetails>;
}
