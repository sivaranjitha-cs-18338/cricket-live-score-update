"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferManager = void 0;
const constants_1 = __importDefault(require("../utils/constants"));
const validator_1 = require("../utils/validator");
const api_request_1 = require("../utils/api-request");
const bucket_1 = require("./bucket");
const error_1 = require("../utils/error");
const { COMPONENT, REQ_METHOD, CREDENTIAL_USER } = constants_1.default;
class Stratus {
    constructor(app) {
        (0, validator_1.isValidApp)(app, true);
        this.requester = new api_request_1.AuthorizedHttpClient(app, this);
    }
    getComponentName() {
        return COMPONENT.stratus;
    }
    /**
     * List all buckets and their metadata in a project.
     * @access admin
     * @returns {Array<Bucket>} An array of `Bucket` objects representing the buckets in the project.
     */
    listBuckets() {
        return __awaiter(this, void 0, void 0, function* () {
            const request = {
                method: REQ_METHOD.get,
                path: '/bucket',
                type: "json" /* RequestType.JSON */,
                expecting: "json" /* ResponseType.JSON */,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield this.requester.send(request);
            const jsonArr = resp.data.data;
            const bucketArr = jsonArr.map((bucket) => new bucket_1.Bucket(this.requester, bucket));
            return bucketArr;
        });
    }
    /**
     * Check if a bucket exists and verify user access permissions for it.
     * @param bucketName - The name of the bucket to check.
     * @param throwErr - If `true`, throws an error if the bucket doesn't exist (optional).
     * @access admin
     * @returns {boolean}`true` if the bucket exists and is accessible; otherwise, `false`.
     */
    headBucket(bucketName, throwErr) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyString)(bucketName, 'bucket_name', true);
            }, error_1.CatalystStratusError);
            try {
                const request = {
                    method: REQ_METHOD.head,
                    path: '/bucket',
                    qs: { bucket_name: bucketName },
                    type: "json" /* RequestType.JSON */,
                    expecting: "json" /* ResponseType.JSON */,
                    catalyst: true,
                    track: true,
                    user: CREDENTIAL_USER.admin
                };
                const resp = yield this.requester.send(request);
                return (resp.statusCode === 200);
            }
            catch (err) {
                if (!throwErr) {
                    const status = err.statusCode;
                    if (status === 404 || status === 403 || status == 400) {
                        return false;
                    }
                }
                throw err;
            }
        });
    }
    /**
     * Get an instance of a bucket by its name.
     * @param bucketName - The name of the bucket to create an instance for.
     * @access admin
     * @returns { Bucket } Instance representing the specified bucket.
     * @throws { CatalystStratusError } if the `bucketName` is not a valid non-empty string.
     */
    bucket(bucketName) {
        if (!(0, validator_1.isNonEmptyString)(bucketName)) {
            throw new error_1.CatalystStratusError('invalid-argument', 'Value provided for bucket_name must be a non empty String.', bucketName);
        }
        return new bucket_1.Bucket(this.requester, bucketName);
    }
}
exports.default = Stratus;
var transfer_manager_1 = require("./transfer-manager");
Object.defineProperty(exports, "TransferManager", { enumerable: true, get: function () { return transfer_manager_1.TransferManager; } });
