"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultipartUpload = void 0;
class MultipartUpload {
    constructor(bucketInstance, key, uploadId) {
        this._requester = bucketInstance.getAuthorizationClient();
        this.bucket = bucketInstance;
        this.key = key;
        this.uploadId = uploadId;
    }
    /**
     * Will upload an individual part of the object to a bucket. Required part is referenced using a distinct part number.
     * Parts can be uploaded in any order, and each part should be identified by a unique `partNumber`.
     * (ranging from 1 to 1000).
     * @param body - The content to be uploaded as part of the file. This can either be a stream or a buffer.
     * @param partNumber - The part number (between 1 and 1000) that indicates the order of the part in the multipart upload.
     * @returns {boolean} A boolean indicating the success or failure of the part upload.
     */
    uploadPart(body, partNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield this.bucket.uploadPart(this.key, this.uploadId, body, partNumber);
            return resp;
        });
    }
    /**
     * Completes the multipart upload. This method finalizes the upload process
     * 				and assembles the parts into the complete object.
     * @returns {boolean} A boolean indicating the success or failure of completing the multipart upload.
     */
    completeUpload() {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = this.bucket.completeMultipartUpload(this.key, this.uploadId);
            return resp;
        });
    }
    /**
     * Retrieves a summary of the uploaded parts for the multipart upload.
     * This summary contains information about each part of the uploaded file,
     *  					including their status and part number.
     * @returns {IStratusMultipartSummaryRes} A summary of the multipart upload, containing details of all uploaded parts.
     */
    getUploadSummary() {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield this.bucket.getMultipartUploadSummary(this.key, this.uploadId);
            return resp;
        });
    }
}
exports.MultipartUpload = MultipartUpload;
