"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var _TransferManager_instances, _TransferManager_uploadPart, _TransferManager_getObjectPart;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferManager = void 0;
const logger_1 = require("../../utils/logger");
const validator_1 = require("../../utils/validator");
const error_1 = require("../../utils/error");
const multipart_upload_1 = require("./multipart-upload");
class TransferManager {
    constructor(bucketInstance) {
        _TransferManager_instances.add(this);
        this._requester = bucketInstance.getAuthorizationClient();
        this.bucket = bucketInstance;
    }
    /**
     * Creates a new multipart upload instance for uploading an object in parts.
     * @param key - The name of the object to be uploaded.
     * @param uploadId - (Optional) Upload ID for the multipart upload session.
     * 					 If not provided, a new upload is initiated.
     * @returns {MultipartUpload} An instance of the MultipartUpload.
     */
    createMultipartInstance(key, uploadId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyString)(key, 'key', true);
            }, error_1.CatalystStratusError);
            if (uploadId === undefined) {
                uploadId = (yield this.bucket.initiateMultipartUpload(key)).upload_id;
            }
            return new multipart_upload_1.MultipartUpload(this.bucket, key, uploadId);
        });
    }
    /**
     * Uploads an object in multiple parts.
     * This method divides the object into smaller parts and uploads them concurrently.
     * @param key - The name of the object to be uploaded.
     * @param body - The object body as a readable stream.
     * @param partSize - The size (in MB) of each part.
     * @param concurrency - The maximum number of parts to upload concurrently. Default is 5.
     * @returns {IStratusMultipartSummaryRes} The result of the multipart upload, including the status and summary.
     */
    putObjectAsParts(key, body, partSize, concurrency = 5) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyString)(key, 'key', true);
                (0, validator_1.isNonNullValue)(body, 'object_body', true);
                (0, validator_1.isValidNumber)(partSize, true);
                this.validatePartSize(partSize);
            }, error_1.CatalystStratusError);
            partSize = partSize * (1024 * 1024);
            const initiateRes = yield this.createMultipartInstance(key);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const parts = [];
            let partNumber = 1;
            return new Promise((resolve, reject) => {
                body.on('readable', () => __awaiter(this, void 0, void 0, function* () {
                    let chunk;
                    while ((chunk = body.read(partSize)) !== null) {
                        parts.push(__classPrivateFieldGet(this, _TransferManager_instances, "m", _TransferManager_uploadPart).call(this, initiateRes, chunk, partNumber++, partSize));
                        if (parts.length > concurrency) {
                            yield Promise.race(parts);
                        }
                    }
                }));
                body.on('end', () => __awaiter(this, void 0, void 0, function* () {
                    try {
                        yield Promise.all(parts);
                        const completeRes = yield initiateRes.completeUpload();
                        if (!completeRes) {
                            return reject(`Error when completing the multipart object(${key}) upload`);
                        }
                        logger_1.LOGGER.info('Upload completed');
                        resolve(yield initiateRes.getUploadSummary());
                    }
                    catch (err) {
                        reject(err);
                    }
                }));
                body.on('error', (err) => {
                    reject(`Error reading file: ${err.message}`);
                });
            });
        });
    }
    /**
     * Retrieves the object as an iterable of multiple parts.
     *  This method allows iterating over large objects without loading the entire object into memory.
     * @param key - The name of the object to retrieve.
     * @param partSize - The size (in MB) of each part.
     * @returns {AsyncGenerator<Buffer, void>} An asynchronous generator that yields each part of the object as a Buffer.
     */
    getIterableObject(key, partSize, versionId) {
        return __asyncGenerator(this, arguments, function* getIterableObject_1() {
            yield __await((0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyString)(key, 'key', true);
                (0, validator_1.isValidNumber)(partSize, true);
                this.validatePartSize(partSize);
            }, error_1.CatalystStratusError));
            partSize = partSize * 1024 * 1024;
            const file = yield __await(this.bucket.object(key).getDetails(versionId));
            const fileSize = file.size;
            let start = 0;
            let end = partSize;
            while (start < fileSize) {
                const chunk = yield __await(__classPrivateFieldGet(this, _TransferManager_instances, "m", _TransferManager_getObjectPart).call(this, key, start, end));
                const chunks = [];
                yield yield __await(new Promise((resolve, reject) => {
                    chunk.on('body', (body) => {
                        chunks.push(body);
                    });
                    chunk.on('end', () => resolve(Buffer.concat(chunks)));
                    chunk.on('error', reject);
                }));
                end = (Math.min(start + partSize, fileSize) - 1);
                start = end + 1;
            }
        });
    }
    /**
     * Generates downloaders for each part of the object.
     *  This method returns functions that can be called to download specific parts of an object.
     * @param key - The name of the object.
     * @param partSize - The size (in MB) of each part.
     * @returns { Array<() => Promise<Readable>> } An array of functions that return a readable stream for each part of the object.
     */
    generatePartDownloaders(key, partSize, versionId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyString)(key, 'key', true);
                (0, validator_1.isValidNumber)(partSize, true);
                this.validatePartSize(partSize);
            }, error_1.CatalystStratusError);
            const parts = [];
            partSize = partSize * 1024 * 1024;
            const file = yield this.bucket.object(key).getDetails(versionId);
            const fileSize = file.size;
            let start = 0;
            while (start < fileSize) {
                const end = (Math.min(start + partSize, fileSize) - 1);
                ((startVal) => {
                    parts.push(() => __classPrivateFieldGet(this, _TransferManager_instances, "m", _TransferManager_getObjectPart).call(this, key, startVal, end));
                })(start);
                start = end + 1;
            }
            return parts;
        });
    }
    validateObjectSize(size) {
        if (size < 5) {
            throw new error_1.CatalystStratusError('INVALID_OBJECT_SIZE', `The file size (${size} MB) is too small for multipart upload. Use a single PUT request for files smaller than 5 MB.`);
        }
        return true;
    }
    validatePartSize(partSize) {
        if (partSize < 5 || partSize > 100) {
            throw new error_1.CatalystStratusError('INVALID_PART_SIZE', `Invalid part size. Part size must be between 5 and 100 MB. Provided: ${partSize}`);
        }
        return true;
    }
}
exports.TransferManager = TransferManager;
_TransferManager_instances = new WeakSet(), _TransferManager_uploadPart = function _TransferManager_uploadPart(initiateRes, stream, partNumber, partSize) {
    return __awaiter(this, void 0, void 0, function* () {
        const res = yield initiateRes.uploadPart(stream, partNumber);
        if (res) {
            logger_1.LOGGER.info(`Part ${partNumber} Uploaded`);
        }
        else {
            throw new error_1.CatalystStratusError('UPLOAD_ERROR', `Error while uploading the part ${(partNumber - 1) * partSize} to ${partNumber * partSize} in bytes`);
        }
        return res;
    });
}, _TransferManager_getObjectPart = function _TransferManager_getObjectPart(key, start, end, retries = 3) {
    return __awaiter(this, void 0, void 0, function* () {
        yield (0, validator_1.wrapValidatorsWithPromise)(() => {
            (0, validator_1.isNonEmptyString)(key, 'key', true);
            (0, validator_1.isValidNumber)(start, true);
            (0, validator_1.isValidNumber)(end, true);
        }, error_1.CatalystStratusError);
        const res = yield this.bucket.getObject(key, { range: `${start}-${end}` });
        const err = new Promise((_resolve, reject) => {
            res.on('error', () => __awaiter(this, void 0, void 0, function* () {
                if (retries > 0) {
                    yield new Promise((resolve) => setTimeout(resolve, 1000));
                    yield __classPrivateFieldGet(this, _TransferManager_instances, "m", _TransferManager_getObjectPart).call(this, key, start, end, --retries);
                }
                else {
                    reject(`Error when downloading the part from ${start}-${end} bytes`);
                }
            }));
        });
        return res || err;
    });
};
