import { Component } from '../utils/pojo/common';
import { CatalystApp } from '../catalyst-app';
import { AuthorizedHttpClient } from '../utils/api-request';
import { Bucket } from './bucket';
export default class Stratus implements Component {
    requester: AuthorizedHttpClient;
    constructor(app: CatalystApp);
    getComponentName(): string;
    /**
     * List all buckets and their metadata in a project.
     * @access admin
     * @returns {Array<Bucket>} An array of `Bucket` objects representing the buckets in the project.
     */
    listBuckets(): Promise<Array<Bucket>>;
    /**
     * Check if a bucket exists and verify user access permissions for it.
     * @param bucketName - The name of the bucket to check.
     * @param throwErr - If `true`, throws an error if the bucket doesn't exist (optional).
     * @access admin
     * @returns {boolean}`true` if the bucket exists and is accessible; otherwise, `false`.
     */
    headBucket(bucketName: string, throwErr?: boolean): Promise<boolean>;
    /**
     * Get an instance of a bucket by its name.
     * @param bucketName - The name of the bucket to create an instance for.
     * @access admin
     * @returns { Bucket } Instance representing the specified bucket.
     * @throws { CatalystStratusError } if the `bucketName` is not a valid non-empty string.
     */
    bucket(bucketName: string): Bucket;
}
export { TransferManager } from './transfer-manager';
