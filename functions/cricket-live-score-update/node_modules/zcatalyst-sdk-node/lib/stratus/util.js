"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Util = void 0;
const constants_1 = __importDefault(require("../utils/constants"));
const { REQ_METHOD, CREDENTIAL_USER } = constants_1.default;
class Util {
    constructor(bucket) {
        var _a, _b;
        this.bucket = bucket;
        this._requester = bucket.getAuthorizationClient();
        this.userType = (_a = this._requester.app) === null || _a === void 0 ? void 0 : _a.credential.getCurrentUserType();
        this.userScope = (_b = this._requester.app) === null || _b === void 0 ? void 0 : _b.credential.getCurrentUser();
    }
    _getUserType() {
        return this.userType;
    }
    _getUserScope() {
        return this.userScope;
    }
    static getSignature(bucketName) {
        return Util.bucketSignatures[bucketName];
    }
    static setSignature(bucketName, signature) {
        Util.bucketSignatures[bucketName] = signature;
    }
    getBucketSignature() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(this.userType !== 'admin' && this.userScope !== 'admin')) {
                const signJson = Util.getSignature(this.bucket.getName()) || {};
                if (signJson && signJson.expiry_time > Date.now()) {
                    return signJson.signature;
                }
                const request = {
                    method: REQ_METHOD.post,
                    path: '/bucket/signature',
                    qs: { bucket_name: this.bucket.bucketDetails.bucket_name },
                    type: "json" /* RequestType.JSON */,
                    expecting: "json" /* ResponseType.JSON */,
                    catalyst: true,
                    track: true,
                    user: CREDENTIAL_USER.admin
                };
                const resp = (yield this._requester.send(request)).data.data;
                signJson['expiry_time'] = resp.expiry_time - 300000;
                signJson['signature'] = queryStringToObject(resp.signature);
                Util.setSignature(this.bucket.getName(), signJson);
                return signJson.signature;
            }
            return undefined;
        });
    }
}
exports.Util = Util;
Util.bucketSignatures = {};
function queryStringToObject(query) {
    const params = new URLSearchParams(query);
    const obj = {};
    for (const [key, value] of params.entries()) {
        obj[key] = value;
    }
    return obj;
}
