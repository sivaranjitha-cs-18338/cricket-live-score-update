"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _StratusObject_requester, _StratusObject_param;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StratusObject = void 0;
const constants_1 = __importDefault(require("../utils/constants"));
const validator_1 = require("../utils/validator");
const error_1 = require("../utils/error");
const { REQ_METHOD, CREDENTIAL_USER } = constants_1.default;
class StratusObject {
    constructor(bucketInstance, keyDetails) {
        _StratusObject_requester.set(this, void 0);
        _StratusObject_param.set(this, void 0);
        if (typeof keyDetails !== 'string') {
            this.keyDetails = keyDetails;
        }
        else {
            this.keyDetails = { key: keyDetails };
        }
        __classPrivateFieldSet(this, _StratusObject_param, {
            bucket_name: bucketInstance.getName(),
            object_key: this.keyDetails.key
        }, "f");
        __classPrivateFieldSet(this, _StratusObject_requester, bucketInstance.getAuthorizationClient(), "f");
    }
    /**
     * Retrieves the details of this object in the bucket.
     * @param versionId - Unique version identifier of the object.
     * 					If not provided, details for the latest version are fetched.
     * @returns {IStratusObjectDetails} The details of the object, including metadata, version information, etc.
     */
    getDetails(versionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = Object.assign({}, __classPrivateFieldGet(this, _StratusObject_param, "f"));
            if (versionId) {
                params['version_id'] = versionId;
            }
            const request = {
                method: REQ_METHOD.get,
                path: '/bucket/object',
                qs: params,
                type: "json" /* RequestType.JSON */,
                expecting: "json" /* ResponseType.JSON */,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield __classPrivateFieldGet(this, _StratusObject_requester, "f").send(request);
            return resp.data.data;
        });
    }
    /**
     * Sets the metadata for an object. It will replace the existing metadata.
     * @param metaDetails - A record of metadata key-value pairs to be set for the object.
     * @access admin
     * @returns {Record<string, string>} The updated object details, including the new metadata.
     */
    putMeta(metaDetails) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, validator_1.wrapValidatorsWithPromise)(() => {
                (0, validator_1.isNonEmptyObject)(metaDetails, 'meta_details', true);
            }, error_1.CatalystStratusError);
            const request = {
                method: REQ_METHOD.put,
                path: '/bucket/object/metadata',
                qs: __classPrivateFieldGet(this, _StratusObject_param, "f"),
                data: { meta_data: metaDetails },
                type: "json" /* RequestType.JSON */,
                expecting: "json" /* ResponseType.JSON */,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield __classPrivateFieldGet(this, _StratusObject_requester, "f").send(request);
            return resp.data.data;
        });
    }
    /**
     * Generates a signed URL for an object in a caching-enabled bucket.
     * The signed URL can be used to access the object for a specified duration.
     * @param url - The cached URL of the object.
     * @param expiry - The expiration time for the signed URL in seconds. Default 3600.
     * @access admin
     * @returns {IStratusSignedURLRes} The response containing the signed URL.
     */
    generateCacheSignedUrl(url, expiry) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = {
                method: REQ_METHOD.get,
                path: '/auth/signed-url',
                qs: { url, expiry_in_seconds: expiry },
                type: "json" /* RequestType.JSON */,
                expecting: "json" /* ResponseType.JSON */,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield __classPrivateFieldGet(this, _StratusObject_requester, "f").send(request);
            return resp.data.data;
        });
    }
    /**
     * Lists the versions of an object in a paginated manner.
     * This method can be used to retrieve a limited set of object versions at a time, with support for pagination.
     * @param maxVersion - The maximum number of versions to return. Default 1000.
     * @param nextToken - The token for the next page of results. This is used to fetch the next set of versions.
     * @access admin
     * @returns {IStratusObjectVersions} The paginated list of object versions.
     */
    listPagedVersions(maxVersion, nextToken) {
        return __awaiter(this, void 0, void 0, function* () {
            const param = Object.assign(Object.assign({}, __classPrivateFieldGet(this, _StratusObject_param, "f")), { max_versions: maxVersion, continuation_token: nextToken });
            const request = {
                method: REQ_METHOD.get,
                path: '/bucket/object/versions',
                qs: param,
                type: "json" /* RequestType.JSON */,
                expecting: "json" /* ResponseType.JSON */,
                catalyst: true,
                track: true,
                user: CREDENTIAL_USER.admin
            };
            const resp = yield __classPrivateFieldGet(this, _StratusObject_requester, "f").send(request);
            return resp.data.data;
        });
    }
    /**
     * Retrieves the object versions as an iterable. This method allows iteration over object
     * 						versions without needing to handle pagination manually.
     * @param maxVersion - The maximum number of versions per response. Default 1000.
     * @access admin
     * @returns {AsyncGenerator<IStratusObjectVersionDetails, void>} An asynchronous generator that yields the object version details.
     */
    listIterableVersions(maxVersion) {
        return __asyncGenerator(this, arguments, function* listIterableVersions_1() {
            let nextToken = undefined;
            do {
                const versionOutput = yield __await(this.listPagedVersions(maxVersion, nextToken));
                for (const key of versionOutput.version) {
                    yield yield __await(key);
                }
                nextToken = versionOutput.next_token;
            } while (nextToken);
        });
    }
    toString() {
        return JSON.stringify(this.keyDetails);
    }
    toJSON() {
        return this.keyDetails;
    }
}
exports.StratusObject = StratusObject;
_StratusObject_requester = new WeakMap(), _StratusObject_param = new WeakMap();
