"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _NoSQLItem_attributes;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoSQLItem = void 0;
const byte_1 = require("./byte");
const marshall_1 = require("./marshall");
const set_1 = require("./set");
const unmarshall_1 = require("./unmarshall");
/**
 * Implementation of a NoSQL Item
 */
class NoSQLItem {
    constructor(item) {
        _NoSQLItem_attributes.set(this, {});
        if (item) {
            __classPrivateFieldSet(this, _NoSQLItem_attributes, item, "f");
        }
    }
    /**
     * Get value of the null attribute
     * @param name Attribute name
     * @returns null if attribute is present
     */
    getNull(name) {
        var _a;
        const _null = (_a = __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name]) === null || _a === void 0 ? void 0 : _a.NULL;
        return _null === true ? null : undefined;
    }
    /**
     * Add null(NULL) attribute to the item
     * @param name name of the null attribute
     * @returns NoSQLItem
     */
    addNull(name) {
        __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name] = marshall_1.NoSQLMarshall.makeNull();
        return this;
    }
    /**
     * Get value of a string(S) attribute
     * @param name name of the string attribute
     * @returns value of the string attribute
     */
    getString(name) {
        var _a;
        return (_a = __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name]) === null || _a === void 0 ? void 0 : _a.S;
    }
    /**
     * Add string(S) attribute to the item
     * @param name name of the string attribute
     * @param value value of the string attribute
     * @returns NoSQLItem
     */
    addString(name, value) {
        __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name] = marshall_1.NoSQLMarshall.makeString(value);
        return this;
    }
    /**
     * Get value of a number(N) attribute
     * @param name name of the number attribute
     * @returns value of the number attribute
     */
    getNumber(name) {
        var _a;
        const num = (_a = __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name]) === null || _a === void 0 ? void 0 : _a.N;
        return num === undefined ? undefined : unmarshall_1.NoSQLUnMarshall.makeNumber(num);
    }
    /**
     * Add number(N) attribute to the item
     * @param name name of the number attribute
     * @param value value of the number attribute
     * @returns NoSQLItem
     */
    addNumber(name, value) {
        __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name] = marshall_1.NoSQLMarshall.makeNumber(value);
        return this;
    }
    /**
     * Get value of a byte(B) attribute
     * @param name name of the byte attribute
     * @returns value of the byte attribute
     */
    getByte(name) {
        var _a;
        const byte = (_a = __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name]) === null || _a === void 0 ? void 0 : _a.B;
        if (typeof byte === 'string') {
            return new byte_1.NoSQLByte(byte);
        }
        return byte;
    }
    addByte(name, value) {
        __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name] = marshall_1.NoSQLMarshall.makeByte(value);
        return this;
    }
    /**
     * Get value of a boolean(BOOL) attribute
     * @param name name of the boolean attribute
     * @returns value of the boolean attribute
     */
    getBoolean(name) {
        return __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name].BOOL === 'true';
    }
    /**
     * Add a boolean(BOOL) attribute to the item
     * @param name name of the boolean attribute
     * @param value value of the boolean attribute
     * @returns NoSQLItem
     */
    addBoolean(name, value) {
        __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name] = marshall_1.NoSQLMarshall.makeBoolean(value);
        return this;
    }
    /**
     * Get value of a list(L) attribute
     * @param name name of the list attribute
     * @returns value of the list attribute
     */
    getList(name) {
        var _a;
        const list = (_a = __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name]) === null || _a === void 0 ? void 0 : _a.L;
        return list === undefined ? undefined : unmarshall_1.NoSQLUnMarshall.makeList(list);
    }
    /**
     * Add a list(L) attribute to the item
     * @param name name of the list attribute
     * @param value value of the list attribute
     * @returns NoSQLItem
     */
    addList(name, value) {
        __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name] = marshall_1.NoSQLMarshall.makeList(value);
        return this;
    }
    /**
     * Get value of a map(M) attribute
     * @param name name of the map attribute
     * @returns value of the map attribute
     */
    getMap(name) {
        var _a;
        const map = (_a = __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name]) === null || _a === void 0 ? void 0 : _a.M;
        return map !== undefined ? unmarshall_1.NoSQLUnMarshall.makeMap(map) : undefined;
    }
    /**
     * Add a map(M) attribute to the item
     * @param name name of the map attribute
     * @param value value of the map attribute
     * @param options marshalling options to convert plain js objects to NoSQL attributes
     * @returns NoSQLItem
     */
    addMap(name, value, options) {
        __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name] = marshall_1.NoSQLMarshall.makeMap(value, options);
        return this;
    }
    /**
     * Get value of a string set(SS) attribute
     * @param name name of the string set attribute
     * @returns value of the string set attribute
     */
    getStringSet(name) {
        var _a;
        const strSet = (_a = __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name]) === null || _a === void 0 ? void 0 : _a.SS;
        if (Array.isArray(strSet)) {
            return new set_1.NoSQLStringSet(strSet);
        }
        return strSet;
    }
    addStringSet(name, value) {
        __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name] = marshall_1.NoSQLMarshall.makeStringSet(value);
        return this;
    }
    /**
     * Get value of a number set(SN) attribute
     * @param name name of the number set attribute
     * @returns value of the number set attribute
     */
    getNumberSet(name) {
        var _a;
        const numSet = (_a = __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name]) === null || _a === void 0 ? void 0 : _a.SN;
        if (Array.isArray(numSet)) {
            return new set_1.NoSQLNumberSet(numSet.map((num) => unmarshall_1.NoSQLUnMarshall.makeNumber(num)));
        }
        return numSet;
    }
    addNumberSet(name, value) {
        __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name] = marshall_1.NoSQLMarshall.makeNumberSet(value);
        return this;
    }
    /**
     * Get value of a byte set(SB) attribute
     * @param name name of the byte set attribute
     * @returns value of the byte set attribute
     */
    getByteSet(name) {
        var _a;
        const byteSet = (_a = __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name]) === null || _a === void 0 ? void 0 : _a.SB;
        if (Array.isArray(byteSet)) {
            return new set_1.NoSQLByteSet(byteSet);
        }
        return byteSet;
    }
    addByteSet(name, value) {
        __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name] = marshall_1.NoSQLMarshall.makeByteSet(value);
        return this;
    }
    /**
     * Add a set of type string or number or TNoSQLByte as an attribute to this item.
     * @param name attribute name
     * @param value set to be added
     * @param options marshalling options
     * @returns NoSQLItem
     */
    addSet(name, value, options) {
        __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name] = marshall_1.NoSQLMarshall.makeSet(value, options);
        return this;
    }
    /**
     * Adds a NoSQL attribute to the item without any validations or marshalling.
     *
     * Note: Use this function only when it's absolutely necessary. Prefer to user other attribute addition functions over this.
     * @param name name of the attribute
     * @param type NoSQL type of the attribute
     * @param value value of the attribute
     * @returns NoSQLItem
     */
    addRaw(name, type, value) {
        __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name] = {
            [type]: value
        };
        return this;
    }
    /**
     * Adds a NoSQL attribute to the item with validation and marshalling.
     * @param name name of the attribute
     * @param value value of the attribute
     * @param options options to marshall the value
     * @returns NoSQLItem
     */
    add(name, value, options) {
        __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name] = marshall_1.NoSQLMarshall.make(value, options);
        return this;
    }
    /**
     * Get a near-native value of the NoSQL attribute
     * @param name name of the attribute
     * @returns value of the attribute type TNoSQLValues
     */
    get(name) {
        return unmarshall_1.NoSQLUnMarshall.makeNative(__classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name]);
    }
    /**
     * Remove an attribute from the item
     * @param name name of the attribute to be removed
     * @returns value of the removed attribute
     */
    remove(name) {
        const item = __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name];
        delete __classPrivateFieldGet(this, _NoSQLItem_attributes, "f")[name];
        return item;
    }
    /**
     * Check if an attribute exists in the item
     * @param name name of the attribute to check
     * @returns true if the attribute is present
     */
    has(name) {
        return name in __classPrivateFieldGet(this, _NoSQLItem_attributes, "f");
    }
    /**
     * Get the total number of attributes present
     * @returns total number of attributes
     */
    numberOfAttributes() {
        return Object.keys(__classPrivateFieldGet(this, _NoSQLItem_attributes, "f")).length;
    }
    /**
     * Returns a serializable json object of the item
     * @returns JSON representation of the NoSQLItem
     */
    toJSON() {
        return __classPrivateFieldGet(this, _NoSQLItem_attributes, "f");
    }
    /**
     * Returns a near native object representation of the item
     * @returns near-native representation of the NoSQLItem
     */
    to() {
        return unmarshall_1.NoSQLUnMarshall.makeMap(__classPrivateFieldGet(this, _NoSQLItem_attributes, "f"));
    }
    /**
     * Create a NoSQL item from plain java script object
     * @param obj to be used to create the item
     * @param options marshalling options to convert native js types to NoSQL types
     * @returns new NoSQLItem
     */
    static from(obj, options) {
        const attribute = {};
        Object.entries(obj).forEach(([key, val]) => {
            attribute[key] = marshall_1.NoSQLMarshall.make(val, options);
        });
        return new NoSQLItem(attribute);
    }
}
exports.NoSQLItem = NoSQLItem;
_NoSQLItem_attributes = new WeakMap();
