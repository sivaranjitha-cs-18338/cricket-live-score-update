"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoSQLByteSet = exports.NoSQLNumberSet = exports.NoSQLStringSet = void 0;
const error_1 = require("../utils/error");
const validator_1 = require("../utils/validator");
const byte_1 = require("./byte");
/**
 * String set (SS) implementation for NoSQL
 */
class NoSQLStringSet extends Set {
    constructor(values) {
        super(values);
    }
    /**
     * Add a string value to the set
     * @param str value to be added
     * @returns NoSQLStringSet
     */
    add(str) {
        if (typeof str !== 'string') {
            throw new Error('str value not a string');
        }
        super.add(str);
        return this;
    }
    /**
     * Serialize the NoSQLStringSet to an Array of unique strings
     * @returns Array representation of the NoSQLStringSet
     */
    toJSON() {
        return Array.from(this);
    }
}
exports.NoSQLStringSet = NoSQLStringSet;
/**
 * Number set (SN) implementation for NoSQL
 */
class NoSQLNumberSet extends Set {
    constructor(values) {
        super(values);
    }
    /**
     * Add a number or bigint value to the set
     * @param num value to be added
     * @returns NoSQLStringSet
     */
    add(num) {
        if (typeof num === 'number') {
            (0, validator_1.isValidNumber)(num);
        }
        else if (typeof num !== 'bigint') {
            throw new error_1.CatalystNoSQLError('not_number', `The value of num is not a valid number type`);
        }
        super.add(num);
        return this;
    }
    /**
     * Serialize the NoSQLNumberSet to an Array of unique string
     * @returns Array representation of the NoSQLNumberSet
     */
    toJSON() {
        return Array.from(this).map((val) => val.toString());
    }
}
exports.NoSQLNumberSet = NoSQLNumberSet;
/**
 * Byte set (SB) implementation for NoSQL
 */
class NoSQLByteSet extends Set {
    constructor(values) {
        super(values === null || values === void 0 ? void 0 : values.map((val) => (val instanceof byte_1.NoSQLByte ? val : new byte_1.NoSQLByte(val))));
    }
    add(buffer) {
        super.add(buffer instanceof byte_1.NoSQLByte ? buffer : new byte_1.NoSQLByte(buffer));
        return this;
    }
    /**
     * Serializes the buffer set to Array of unique base64 encoded string
     * @returns Array of NoSQLByte
     */
    toJSON() {
        return Array.from(this);
    }
}
exports.NoSQLByteSet = NoSQLByteSet;
