/// <reference types="node" />
import { TNoSQLByte } from './types';
/**
 * Byte(B) implementation of a NoSQL
 */
export declare class NoSQLByte {
    #private;
    constructor(bytes: TNoSQLByte | string);
    /**
     * Check if an object is a NoSQL compatible buffer
     * @param data object to check
     * @returns true if the object is a compatible buffer
     */
    static isBuffer(data: unknown): boolean;
    /**
     * Get a raw representation of the byte value
     * @returns byte value
     */
    raw(): TNoSQLByte | string;
    /**
     * Converts the NoSQLByte to native Buffer
     * @returns Buffer representation of the NoSQLByte
     */
    toBuffer(): Buffer;
    /**
     * Converts the NoSQLByte to Int8Array
     * @returns Int8Array representation of the NoSQLByte
     */
    toInt8Array(): Int8Array;
    /**
     * Converts the NoSQLByte to Uint8Array
     * @returns Uint8Array representation of the NoSQLByte
     */
    toUint8Array(): Uint8Array;
    /**
     * Converts the NoSQLByte to Uint8ClampedArray
     * @returns Uint8ClampedArray representation of the NoSQLByte
     */
    toUint8ClampedArray(): Uint8ClampedArray;
    /**
     * Converts the NoSQLByte to Int16Array
     * @returns Int16Array representation of the NoSQLByte
     */
    toInt16Array(): Int16Array;
    /**
     * Converts the NoSQLByte to Uint16Array
     * @returns Uint16Array representation of the NoSQLByte
     */
    toUint16Array(): Uint16Array;
    /**
     * Converts the NoSQLByte to Int32Array
     * @returns Int32Array representation of the NoSQLByte
     */
    toInt32Array(): Int32Array;
    /**
     * Converts the NoSQLByte to Uint32Array
     * @returns Uint32Array representation of the NoSQLByte
     */
    toUint32Array(): Uint32Array;
    /**
     * Converts the NoSQLByte to Float32Array
     * @returns Float32Array representation of the NoSQLByte
     */
    toFloat32Array(): Float32Array;
    /**
     * Converts the NoSQLByte to Float64Array
     * @returns Float64Array representation of the NoSQLByte
     */
    toFloat64Array(): Float64Array;
    /**
     * Serializable representation of the NoSQLByte
     * @returns base64 encoded string of the NoSQLByte
     */
    toJSON(): string;
    /**
     * Base64 encoded string representation of the NoSQLByte
     * @returns base64 encoded string of the NoSQLByte
     */
    toString(): string;
}
