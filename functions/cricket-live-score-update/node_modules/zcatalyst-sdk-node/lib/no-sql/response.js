"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoSQLData = void 0;
const error_1 = require("../utils/error");
const enum_1 = require("./enum");
const item_1 = require("./item");
class NoSQLData {
    constructor(data) {
        this.status = data.status;
        this.item = data.item && new item_1.NoSQLItem(data.item);
        this.old_item = data.old_item && new item_1.NoSQLItem(data.old_item);
    }
}
exports.NoSQLData = NoSQLData;
/**
 * Class that represents the response returned from performing a NoSQL operation
 */
class NoSQLResponse {
    constructor(resp) {
        this.size = resp.size;
        this.start_key = resp.start_key && new item_1.NoSQLItem(resp.start_key);
        this.operation = resp.operation;
        resp.get && (this.get = resp.get.map((i) => new NoSQLData(i)));
        resp.update && (this.update = resp.update.map((i) => new NoSQLData(i)));
        resp.delete && (this.delete = resp.delete.map((i) => new NoSQLData(i)));
        resp.create && (this.create = resp.create.map((i) => new NoSQLData(i)));
    }
    /**
     * Get the response data based on the current operation
     * @returns NoSQLData
     */
    getResponseData() {
        let data;
        switch (this.operation) {
            case enum_1.NoSQLCrudOperation.CREATE: {
                data = this.create;
                break;
            }
            case enum_1.NoSQLCrudOperation.READ: {
                data = this.get;
                break;
            }
            case enum_1.NoSQLCrudOperation.UPDATE: {
                data = this.update;
                break;
            }
            case enum_1.NoSQLCrudOperation.DELETE: {
                data = this.delete;
                break;
            }
        }
        if (data === undefined) {
            throw new error_1.CatalystNoSQLError('invalid_response', `Invalid NoSQL response for ${this.operation} operation`);
        }
        return data;
    }
    toString() {
        return JSON.stringify(this);
    }
}
exports.default = NoSQLResponse;
