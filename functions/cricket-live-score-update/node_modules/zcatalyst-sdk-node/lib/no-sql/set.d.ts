import { NoSQLByte } from './byte';
import { TNoSQLByte } from './types';
/**
 * String set (SS) implementation for NoSQL
 */
export declare class NoSQLStringSet extends Set<string> {
    constructor(values?: Array<string>);
    /**
     * Add a string value to the set
     * @param str value to be added
     * @returns NoSQLStringSet
     */
    add(str: string): this;
    /**
     * Serialize the NoSQLStringSet to an Array of unique strings
     * @returns Array representation of the NoSQLStringSet
     */
    toJSON(): Array<string>;
}
/**
 * Number set (SN) implementation for NoSQL
 */
export declare class NoSQLNumberSet extends Set<number | bigint> {
    constructor(values?: Array<number | bigint>);
    /**
     * Add a number or bigint value to the set
     * @param num value to be added
     * @returns NoSQLStringSet
     */
    add(num: number | bigint): this;
    /**
     * Serialize the NoSQLNumberSet to an Array of unique string
     * @returns Array representation of the NoSQLNumberSet
     */
    toJSON(): Array<string>;
}
/**
 * Byte set (SB) implementation for NoSQL
 */
export declare class NoSQLByteSet extends Set<NoSQLByte> {
    constructor(values?: Array<TNoSQLByte | string | NoSQLByte>);
    /**
     * Adds a buffer to the end of the set
     * @param buffer input buffer
     */
    add(buffer: TNoSQLByte): this;
    /**
     * Adds a NoSQLByte to the end of the set
     * @param buffer input NoSQLByte
     */
    add(buffer: NoSQLByte): this;
    /**
     * Adds a buffer to the end of the set
     * @param buffer base64 encoded string of the buffer
     */
    add(buffer: string): this;
    /**
     * Serializes the buffer set to Array of unique base64 encoded string
     * @returns Array of NoSQLByte
     */
    toJSON(): Array<NoSQLByte>;
}
