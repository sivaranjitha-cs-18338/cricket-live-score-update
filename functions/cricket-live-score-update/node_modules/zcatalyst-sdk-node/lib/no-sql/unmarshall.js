"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoSQLUnMarshall = void 0;
const validator_1 = require("../utils/validator");
const byte_1 = require("./byte");
const set_1 = require("./set");
/**
 * Class that contains the un-marshalling utils
 * Converts NoSQL attributes to near-native js objects
 */
class NoSQLUnMarshall {
    /**
     * Make a native or near-native js object from NoSQL attribute
     * @param attr NoSQL attribute to be converted
     * @returns native or near-native js object
     */
    static makeNative(attr) {
        const [k, v] = Object.entries(attr)[0];
        if (v === undefined) {
            throw new Error(`No value defined: ${JSON.stringify(attr)}`);
        }
        switch (k) {
            case 'NULL': {
                return null;
            }
            case 'BOOL':
                return v === 'true';
            case 'N':
                return this.makeNumber(v);
            case 'B':
                return typeof v === 'string' ? new byte_1.NoSQLByte(v) : v;
            case 'S':
                return v;
            case 'L':
                return NoSQLUnMarshall.makeList(v);
            case 'M':
                return NoSQLUnMarshall.makeMap(v);
            case 'SN':
                return v instanceof set_1.NoSQLNumberSet
                    ? v
                    : new set_1.NoSQLNumberSet(v.map((item) => this.makeNumber(item)));
            case 'SB':
                return v instanceof set_1.NoSQLByteSet ? v : new set_1.NoSQLByteSet(v);
            case 'SS':
                return v instanceof set_1.NoSQLStringSet ? v : new set_1.NoSQLStringSet(v);
            default:
                throw new Error(`Unsupported type passed: ${k}`);
        }
    }
    /**
     * Make a near-native Array from Array of NoSQL List attributes
     * @param list Array of NoSQL attributes
     * @returns Array of near-native js objects
     */
    static makeList(list) {
        return list.map((item) => NoSQLUnMarshall.makeNative(item));
    }
    /**
     * Make a near-native plain js object from NoSQL Map attribute
     * @param map NoSQL Map attribute
     * @returns near-native plain js object
     */
    static makeMap(map) {
        return Object.entries(map).reduce((acc, [key, value]) => {
            acc[key] = this.makeNative(value);
            return acc;
        }, {});
    }
    /**
     * Make a number or bigint value from NoSQL Number attribute
     * @param numStr NoSQL Number attribute
     * @returns number or bigint value
     */
    static makeNumber(numStr) {
        const num = Number(numStr);
        if ((0, validator_1.isValidNumber)(num, false)) {
            return num;
        }
        return BigInt(numStr);
    }
}
exports.NoSQLUnMarshall = NoSQLUnMarshall;
