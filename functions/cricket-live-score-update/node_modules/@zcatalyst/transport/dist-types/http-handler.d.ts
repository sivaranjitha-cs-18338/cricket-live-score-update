import { CatalystApp } from '@zcatalyst/auth';
import { ClientRequest, IncomingHttpHeaders, IncomingMessage } from 'http';
import { Component, IRequestConfig } from './utils/interfaces';
export interface IAPIResponse {
    request: ClientRequest;
    statusCode?: number;
    headers: IncomingHttpHeaders;
    data?: string;
    buffer?: Buffer;
    config: IRequestConfig;
    stream?: IncomingMessage;
}
export declare class DefaultHttpResponse {
    statusCode: number;
    headers: IncomingHttpHeaders;
    config: IRequestConfig;
    resp: IAPIResponse;
    constructor(resp: IAPIResponse);
    get data(): any;
}
export declare class HttpClient {
    app?: CatalystApp;
    private user;
    /**
     * @param {CatalystApp} app The app used to fetch access tokens to sign API requests.
     * @constructor
     */
    constructor(app?: CatalystApp);
    send(req: IRequestConfig, apmTrackerName?: string): Promise<DefaultHttpResponse>;
}
export declare class AuthorizedHttpClient extends HttpClient {
    readonly componentName?: string;
    /**
     * @param {unknown} app The app used to fetch access tokens to sign API requests.
     * @constructor
     */
    constructor(app?: CatalystApp, component?: Component);
    send(request: IRequestConfig): Promise<DefaultHttpResponse>;
}
