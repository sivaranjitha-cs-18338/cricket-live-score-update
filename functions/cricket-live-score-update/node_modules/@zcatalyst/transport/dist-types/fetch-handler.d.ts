import { ConfigManager } from '@zcatalyst/auth-client';
import { CoreType, IRequestConfig, jwtAccessTokenResponse, RequestHandlerOptions } from './utils/interfaces';
export declare const keepAliveSupport: {
    supported: undefined | boolean;
};
type ICatalystDataRes = Record<string, string> | string | Blob | ArrayBuffer | ReadableStreamDefaultReader<Uint8Array> | FormData;
export interface ICatalystClientRes {
    request: RequestInit;
    statusCode?: number;
    headers: HeadersInit;
    data?: ICatalystDataRes;
    buffer?: Buffer;
    blob?: Blob;
    config: RequestHandlerOptions;
    stream?: ArrayBuffer;
}
export declare class DefaultHttpResponse {
    statusCode: number;
    headers: HeadersInit;
    config: RequestHandlerOptions;
    resp: ICatalystClientRes;
    constructor(resp: ICatalystClientRes);
    get data(): ICatalystDataRes;
}
export declare class ResponseHandler {
    #private;
    static configManager: ConfigManager;
    constructor();
    static fireGeneralRequest({ requestCore, url }: {
        requestCore: RequestInit;
        url: string;
    }, requestOptions?: RequestHandlerOptions): Promise<DefaultHttpResponse | void>;
    static wrapResponse(response: Response, options?: RequestHandlerOptions): Promise<DefaultHttpResponse>;
    static fireRawRequest(requestCore: CoreType, reqOptions: RequestHandlerOptions): Promise<DefaultHttpResponse>;
    static attachZCAuthHeaders(headers: HeadersInit): Promise<HeadersInit>;
    static getJWTZCAuthToken(): Promise<jwtAccessTokenResponse>;
    static appendQueryString(url: string, qs?: Record<string, string | number | boolean | undefined>): string;
    static send(options: IRequestConfig): Promise<DefaultHttpResponse | void>;
}
export {};
