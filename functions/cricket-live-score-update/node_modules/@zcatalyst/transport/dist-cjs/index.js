'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormData = exports.CatalystAPIError = exports.ResponseType = exports.RequestType = exports.Handler = void 0;
const auth_1 = require("@zcatalyst/auth");
const http_handler_1 = require("./http-handler");
const form_data_1 = __importDefault(require("./utils/form-data"));
exports.FormData = form_data_1.default;
class Handler {
    constructor(app, component) {
        if (!app) {
            app = new auth_1.ZCAuth().getDefaultCredentials();
        }
        if (!(app instanceof auth_1.CatalystApp)) {
            throw new auth_1.CatalystAppError('INVALID_PROJECT_CREDENTIALS', 'Unable to process the project credentials. Please verify that the initialization is configured correctly.');
        }
        this.app = app;
        this.component = component;
    }
    async send(options) {
        const _httpRequester = new http_handler_1.AuthorizedHttpClient(this.app, this.component);
        return (await _httpRequester.send(options));
    }
}
exports.Handler = Handler;
var enums_1 = require("./utils/enums");
Object.defineProperty(exports, "RequestType", { enumerable: true, get: function () { return enums_1.RequestType; } });
Object.defineProperty(exports, "ResponseType", { enumerable: true, get: function () { return enums_1.ResponseType; } });
var errors_1 = require("./utils/errors");
Object.defineProperty(exports, "CatalystAPIError", { enumerable: true, get: function () { return errors_1.CatalystAPIError; } });
