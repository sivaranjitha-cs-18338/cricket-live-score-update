/**
 * Type definitions for Catalyst Datastreams module.
 *
 * This module contains type definitions and interfaces for the Catalyst Datastreams service,
 * including token responses, channel details, and API responses.
 */
import { Component } from '@zcatalyst/utils';
import { ApiResponse, ChannelLiveCountResponse, GetAllChannelsResponse, GetChannelResponse, PublishDataResponse, TokenResponse } from './utils/interfaces';
/**
 * DataStreams component class
 *
 * Provides methods to interact with Catalyst DataStreams service,
 * including getting channel information, publishing data, and retrieving live counts.
 */
export declare class DataStreams implements Component {
    private requester;
    /**
     * Initialize the DataStreams component
     *
     * @param app - The Catalyst application instance
     */
    constructor(app?: unknown);
    /**
     * Get the component name for this service
     *
     * @returns The component name 'Datastreams'
     */
    getComponentName(): string;
    /**
     * Retrieve all datastream channels
     *
     * This method fetches all available datastream channels from the Catalyst service.
     *
     * @returns Response containing all datastream channels information
     * @throws CatalystDataStreamError if the request fails or returns an error
     *
     * @example
     * ```typescript
     * const datastream = app.datastream();
     * const res = await datastream.getAllChannels();
     * console.log('channels::', res);
     * ```
     */
    getAllChannels(): Promise<ApiResponse<GetAllChannelsResponse>>;
    /**
     * Retrieve details of a specific datastream channel
     *
     * This method fetches detailed information about a specific datastream channel
     * identified by the provided channel ID or name.
     *
     * @param channelId - The unique identifier or name of the datastream channel
     * @returns Response containing the channel details
     * @throws CatalystDataStreamError if channelId is invalid or the request fails
     *
     * @example
     * ```typescript
     * const datastream = app.datastream();
     * const channelDetails = await datastream.getChannelDetails("12345"); // Using ID
     * // or
     * const channelDetails = await datastream.getChannelDetails("my_channel"); // Using name
     * console.log('channel details::', channelDetails);
     * ```
     */
    getChannelDetails(channelId: string): Promise<ApiResponse<GetChannelResponse>>;
    /**
     * Get the live connection count for a specific datastream channel
     *
     * This method retrieves the number of active connections currently
     * subscribed to the specified datastream channel.
     *
     * @param channelId - The unique identifier or name of the datastream channel
     * @returns Response containing the live connection count information
     * @throws CatalystDataStreamError if channelId is invalid or the request fails
     *
     * @example
     * ```typescript
     * const datastream = app.datastream();
     * const liveCount = await datastream.getLiveCount("12345"); // Using ID
     * // or
     * const liveCount = await datastream.getLiveCount("my_channel"); // Using name
     * console.log('live count::', liveCount);
     * ```
     */
    getLiveCount(channelId: string): Promise<ApiResponse<ChannelLiveCountResponse>>;
    /**
     * Publish data to a specific datastream channel
     *
     * This method sends data to the specified datastream channel, which will be
     * broadcasted to all active subscribers of that channel.
     *
     * @param channelId - The unique identifier or name of the datastream channel
     * @param data - The data to be published to the channel
     * @returns Response containing the publish operation result
     * @throws CatalystDataStreamError if channelId or data is invalid, or the request fails
     *
     * @example
     * ```typescript
     * const datastream = app.datastream();
     * const result = await datastream.publishData("12345", "Hello, subscribers!"); // Using ID
     * // or
     * const result = await datastream.publishData("my_channel", "Hello, subscribers!"); // Using name
     * console.log('publish result::', result);
     * ```
     */
    publishData(channelId: string, data: string): Promise<ApiResponse<PublishDataResponse>>;
    /**
     * Get a token pair for a specific datastream channel
     *
     * This method retrieves a token pair that can be used to authenticate
     * and authorize access to the specified datastream channel.
     *
     * @param channelId - The unique identifier or name of the datastream channel
     * @param user - The user identifier, can be a user ID (number) or connection name (string)
     * @returns Response containing the token pair information
     * @throws CatalystDataStreamError if channelId is invalid or the request fails
     *
     * @example
     * ```typescript
     * const datastream = app.datastream();
     * const tokenPair = await datastream.getTokenPair("12345", "user123"); // Using ID and user ID
     * // or
     * const tokenPair = await datastream.getTokenPair("my_channel", "connection_name"); // Using name and connection name
     * console.log('token pair::', tokenPair);
     * ```
     */
    getTokenPair(channelId: string | number, { userId, connectionName }: {
        userId?: string;
        connectionName?: string;
    }): Promise<ApiResponse<TokenResponse>>;
}
