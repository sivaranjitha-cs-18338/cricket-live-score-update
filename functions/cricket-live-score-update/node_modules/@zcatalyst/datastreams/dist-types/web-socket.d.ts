/**
 * Enhanced WebSocket DataStreams Client
 *
 * A modern TypeScript implementation of the DataStreams WebSocket client
 * with improved error handling, type safety, and cross-platform support.
 */
import { EventEmitter } from 'events';
import { DataStreamsConfig } from './utils/interfaces';
/**
 * Enhanced DataStreams WebSocket client with modern TypeScript features
 */
export declare class DataStreamsWebSocket extends EventEmitter {
    private readonly config;
    private readonly prdValue;
    private readonly path;
    private url;
    private keyValue;
    private zuidValue;
    private sid;
    private uid;
    private finalUrl;
    private conn;
    private isOpen;
    private manualClosure;
    private ackSent;
    private ackTriggerReceived;
    private reconnect;
    private prevStreamingId;
    private pingInterval;
    private reconnectInterval;
    private pingServerInterval;
    private subscribePayload;
    private ackPayload;
    private readonly unsubscribePayload;
    private readonly serverPingPayload;
    constructor(config: DataStreamsConfig | string, zuid?: string, key?: string);
    /**
     * Create WebSocket connection with cross-platform support
     */
    private createWebSocketConnection;
    /**
     * Setup WebSocket event handlers
     */
    private setupEventHandlers;
    /**
     * Log messages if logging is enabled
     */
    private log;
    /**
     * Handle WebSocket open event
     */
    private handleWebSocketOpenEvent;
    /**
     * Handle WebSocket close event
     */
    private handleWebSocketCloseEvent;
    /**
     * Handle WebSocket error event
     */
    private handleWebSocketErrorEvent;
    /**
     * Handle DataStreams events - main message processing logic
     */
    private handleDMSEvents;
    /**
     * Check if WebSocket is open and ready
     */
    private isWebSocketOpen;
    /**
     * Handle data events (message type 650)
     */
    private handleDataEvents;
    /**
     * Create new WebSocket connection for reconnection
     */
    private makeNewConnection;
    /**
     * Clear ping interval
     */
    private clearPingInterval;
    /**
     * Clear reconnect interval
     */
    private clearReconnectInterval;
    /**
     * Clear ping server interval
     */
    private clearPingServerInterval;
    /**
     * Start ping interval (every 15 seconds)
     */
    private startPing;
    /**
     * Start ping to server (when server is down)
     */
    private startPingToServer;
    /**
     * Start close and reconnect timer (every 27 minutes)
     */
    private startCloseAndReconnect;
    /**
     * Subscribe to a channel with specified type
     * @param subscribeType - live events/earliest available events/resume from previous left off/streaming id
     *                       { 0 - live event, -1 - earliest, -2 - resume, streaming id}
     */
    subscribe(subscribeType?: string): void;
    /**
     * Unsubscribe from channel
     */
    unsubscribe(): void;
    /**
     * Send acknowledgement to receive next stream data if available
     */
    sendAck(): void;
    /**
     * Close the WebSocket connection
     */
    close(): void;
    /**
     * Check if the connection is open
     */
    isConnected(): boolean;
    /**
     * Get current connection state
     */
    getConnectionState(): string;
    /**
     * Get session information
     */
    getSessionInfo(): {
        sid: string;
        uid: string;
    };
}
