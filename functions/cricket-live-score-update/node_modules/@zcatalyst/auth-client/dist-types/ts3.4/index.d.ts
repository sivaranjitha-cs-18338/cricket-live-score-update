import { ConfigManager } from './config-manager';
import { Auth_Protocol } from './util/enums';
import { BodyData, ICatalystSignInConfig } from './util/interfaces';
export interface ICatalystAuthResponse {
    status: number;
    message?: string;
    data: Record<string, unknown>;
}
export interface ICatalystAuthConfig {
    project_id?: string;
    zaid?: string;
    auth_domain?: string;
    is_appsail?: boolean;
    stratus_suffix?: string;
    nimbus_domain?: string;
    api_domain?: string;
    org_id?: string;
    is_local_zoho?: string;
    project_domain?: string;
    environment?: string;
    credentialQR?: ICatalystAuthConfig;
}
declare class ZCAuth {
    private "ZCAuth.#private";
    configManager: ConfigManager;
    constructor();
    getCredentials(): Promise<Object>;
    init(): Promise<void>;
    /**
     * @param id -> Dom elements id in which the login iframe should be loaded
     * @param config -> signInConfig
     */
    signIn(id: string, config?: ICatalystSignInConfig): Promise<void>;
    hostedSignIn(): Promise<void>;
    getProjectUserDetails(org_id?: string): Promise<Record<string, unknown>>;
    publicSignup(): Promise<ICatalystAuthResponse>;
    changePassword(oldPassword: string, newPassword: string): Promise<string>;
    signOut(redirectURL: string): Promise<void>;
    signOutUrl(redirectURL: string): Promise<unknown>;
    signUp(body: BodyData): Promise<unknown>;
    isUserAuthenticated(org_id?: string): Promise<unknown>;
    collectZCRFToken(): Promise<unknown>;
    loginRedirect(url: string, isDefault?: boolean): void;
    signinWithJwt(callbackFn: () => void): void;
    makeRequest(url: string, options?: RequestInit, otherOptions?: {
        responseType?: string;
    }): Promise<ICatalystAuthResponse>;
    constructUrl(): string;
}
declare const zcAuth: ZCAuth;
export { Auth_Protocol, ConfigManager, zcAuth };
