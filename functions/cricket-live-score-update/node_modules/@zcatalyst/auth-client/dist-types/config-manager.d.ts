import { Auth_Protocol } from './util/enums';
export declare class ConfigManager {
    private SDK_INFO;
    private SERVICE_INFO;
    private USER_INFO;
    private static INSTANCE;
    private CREDENTIAL_OBJ;
    constructor();
    set CatalystDomain(newDomain: string);
    get CatalystDomain(): string;
    get IsAppSail(): string;
    set IsAppSail(is_appsail: string);
    get CurrentClientPageHost(): string;
    get CurrentClientPageProtocol(): string;
    get CurrentClientPagePort(): string;
    get CurrentClientPageDomain(): string;
    get RefreshToken(): string;
    get ClientId(): string;
    get ClientSecret(): string;
    get RedirectUri(): string;
    get GrantType(): string;
    get TokenExpiryTime(): number;
    set TokenExpiryTime(nextExpiryTime: number);
    get AuthToken(): string;
    set AuthToken(newAuthToken: string);
    get CsrfToken(): string;
    set CsrfToken(newToken: string);
    get AuthProtocol(): Auth_Protocol;
    set AuthProtocol(authProtocol: Auth_Protocol);
    get APIDomain(): string;
    set APIDomain(apiDomain: string);
    get jwtClientId(): string;
    set jwtClientId(client_id: string);
    get jwtTokenCookieKey(): string;
    get jwtTokenExpiryKey(): string;
    get fetchJwtDetailsCallBack(): string | Function;
    set fetchJwtDetailsCallBack(callbackFn: string | Function);
    get jwtToken(): string;
    set jwtToken(jwt_token: string);
    get jwtTokenExpiry(): number;
    set jwtTokenExpiry(expiryTime: number);
    get jwtAuthToken(): string;
    set jwtAuthToken(auth_token: string);
    get jwtAuthTokenPrefix(): string;
    get jwtResponseType(): string;
    getRetryCount(status_code: number): number | null;
    get TokenPrefix(): string;
    set IAMDomainUrl(newDomain: string);
    get IAMDomainUrl(): string;
    get StratusDomain(): string;
    set StratusDomain(stratusDomain: string);
    get SDKVersion(): string;
    get PollInterval(): number;
    get PollThreshold(): number;
    get ZAID(): string;
    set ZAID(newValue: string);
    get ProjectID(): string;
    set ProjectID(newValue: string);
    get Initialized(): boolean;
    set Initialized(newValue: boolean);
    get CredentialJson(): Object;
    set CredentialJson(newValue: Object);
    get OrgId(): string | number;
    set OrgId(id: string | number);
    get ProjectDomain(): string;
    set ProjectDomain(id: string);
    get Environment(): string;
    set Environment(env: string);
    static getInstance(): ConfigManager;
}
