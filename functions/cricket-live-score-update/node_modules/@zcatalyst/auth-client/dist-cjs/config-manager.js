"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigManager = void 0;
const enums_1 = require("./util/enums");
class ConfigManager {
    constructor() {
        this.CREDENTIAL_OBJ = {};
        this.SDK_INFO = {
            VERSION: '1.0',
            NAME: 'zohoCatalyst',
            INITIALIZED: false,
            RETRIES: {
                NETFAIL: {
                    404: { COUNT: 0, DELAY: 0 }
                }
            },
            POLL_INTERVAL: 1000,
            POLL_THRESHOLD: 0,
            TOKEN_EXPIRY_TIME: 0
        };
        this.SERVICE_INFO = {
            CATALYST_DOMAIN: 'https://console.catalyst.zoho.com',
            STRATUS_DOMAIN: '',
            IAM_DOMAIN: 'https://accounts.zohoportal.com',
            AUTH_PROTOCOL: enums_1.Auth_Protocol.ZcrfTokenProtocol,
            API_DOMAIN: 'https://api.catalyst.zoho.com',
            TOKEN_PREFIX: 'Bearer',
            IS_APPSAIL: '',
            IS_STRATUS: false,
            ENVIRONMENT: ''
        };
        this.USER_INFO = {
            CREDENTIALS: {
                REFRESH_TOKEN: '',
                CLIENT_ID: '',
                CLIENT_SECRET: '',
                REDIRECT_URI: 'https://',
                GRANT_TYPE: 'refresh_token',
                AUTH_TOKEN: '',
                PROJECT_DOMAIN: '',
                PROJECT_ID: ''
            },
            JWT_AUTH: {
                COOKIE_TOKEN_KEY: 'JWT_AUTH',
                COOKIE_EXPIRY_KEY: 'JWT_EXPIRES_AT',
                FETCH_DETAILS_CALLBACK_FN: '',
                CLIENT_ID: '',
                JWT_TOKEN: '',
                TOKEN_PREFIX: 'Zoho-oauthtoken',
                AUTH_TOKEN: '',
                RESPONSE_TYPE: 'remote_token',
                TOKEN_EXPIRY: 0
            },
            CONFIG: {
                ORG_ID: ''
            },
            CURRENT_CLIENT_PAGE_HOST: document.location.hostname,
            CURRENT_CLIENT_PAGE_PROTOCOL: document.location.protocol,
            CURRENT_CLIENT_PAGE_PORT: document.location.port,
            CURRENT_CLIENT_PAGE_ORIGIN: document.location.origin,
            CURRENT_CLIENT_PAGE_HREF: document.location.href,
            CURRENT_CLIENT_PATH_NAME: document.location.pathname
        };
    }
    set CatalystDomain(newDomain) {
        this.SERVICE_INFO.CATALYST_DOMAIN = newDomain;
    }
    get CatalystDomain() {
        return this.SERVICE_INFO.CATALYST_DOMAIN;
    }
    get IsAppSail() {
        return this.SERVICE_INFO.IS_APPSAIL;
    }
    set IsAppSail(is_appsail) {
        this.SERVICE_INFO.IS_APPSAIL = is_appsail;
    }
    get CurrentClientPageHost() {
        return this.USER_INFO.CURRENT_CLIENT_PAGE_HOST;
    }
    get CurrentClientPageProtocol() {
        return this.USER_INFO.CURRENT_CLIENT_PAGE_PROTOCOL;
    }
    get CurrentClientPagePort() {
        return this.USER_INFO.CURRENT_CLIENT_PAGE_PORT;
    }
    get CurrentClientPageDomain() {
        return this.USER_INFO.CURRENT_CLIENT_PAGE_ORIGIN;
    }
    get RefreshToken() {
        return this.USER_INFO.CREDENTIALS.REFRESH_TOKEN;
    }
    get ClientId() {
        return this.USER_INFO.CREDENTIALS.CLIENT_ID;
    }
    get ClientSecret() {
        return this.USER_INFO.CREDENTIALS.CLIENT_SECRET;
    }
    get RedirectUri() {
        return this.USER_INFO.CREDENTIALS.REDIRECT_URI;
    }
    get GrantType() {
        return this.USER_INFO.CREDENTIALS.GRANT_TYPE;
    }
    get TokenExpiryTime() {
        return this.SDK_INFO.TOKEN_EXPIRY_TIME;
    }
    set TokenExpiryTime(nextExpiryTime) {
        this.SDK_INFO.TOKEN_EXPIRY_TIME = nextExpiryTime;
    }
    get AuthToken() {
        return this.USER_INFO.CREDENTIALS.AUTH_TOKEN;
    }
    set AuthToken(newAuthToken) {
        this.USER_INFO.CREDENTIALS.AUTH_TOKEN = newAuthToken;
    }
    get CsrfToken() {
        return this.USER_INFO.CREDENTIALS.CSRF_TOKEN ?? '';
    }
    set CsrfToken(newToken) {
        this.USER_INFO.CREDENTIALS.CSRF_TOKEN = newToken;
    }
    get AuthProtocol() {
        return this.SERVICE_INFO.AUTH_PROTOCOL;
    }
    set AuthProtocol(authProtocol) {
        this.SERVICE_INFO.AUTH_PROTOCOL = authProtocol;
    }
    get APIDomain() {
        return this.SERVICE_INFO.API_DOMAIN;
    }
    set APIDomain(apiDomain) {
        this.SERVICE_INFO.API_DOMAIN = apiDomain;
    }
    get jwtClientId() {
        return this.USER_INFO.JWT_AUTH.CLIENT_ID;
    }
    set jwtClientId(client_id) {
        this.USER_INFO.JWT_AUTH.CLIENT_ID = client_id;
    }
    get jwtTokenCookieKey() {
        return this.USER_INFO.JWT_AUTH.COOKIE_TOKEN_KEY;
    }
    get jwtTokenExpiryKey() {
        return this.USER_INFO.JWT_AUTH.COOKIE_EXPIRY_KEY;
    }
    get fetchJwtDetailsCallBack() {
        return this.USER_INFO.JWT_AUTH.FETCH_DETAILS_CALLBACK_FN;
    }
    set fetchJwtDetailsCallBack(callbackFn) {
        this.USER_INFO.JWT_AUTH.FETCH_DETAILS_CALLBACK_FN = callbackFn;
    }
    get jwtToken() {
        return this.USER_INFO.JWT_AUTH.JWT_TOKEN;
    }
    set jwtToken(jwt_token) {
        this.USER_INFO.JWT_AUTH.JWT_TOKEN = jwt_token;
    }
    get jwtTokenExpiry() {
        return this.USER_INFO.JWT_AUTH.TOKEN_EXPIRY;
    }
    set jwtTokenExpiry(expiryTime) {
        this.USER_INFO.JWT_AUTH.TOKEN_EXPIRY = expiryTime;
    }
    get jwtAuthToken() {
        return this.USER_INFO.JWT_AUTH.AUTH_TOKEN;
    }
    set jwtAuthToken(auth_token) {
        this.USER_INFO.JWT_AUTH.AUTH_TOKEN = auth_token;
    }
    get jwtAuthTokenPrefix() {
        return this.USER_INFO.JWT_AUTH.TOKEN_PREFIX;
    }
    get jwtResponseType() {
        return this.USER_INFO.JWT_AUTH.RESPONSE_TYPE;
    }
    getRetryCount(status_code) {
        if (!(status_code in this.SDK_INFO.RETRIES.NETFAIL))
            return null;
        return this.SDK_INFO.RETRIES.NETFAIL[status_code].COUNT;
    }
    get TokenPrefix() {
        return this.SERVICE_INFO.TOKEN_PREFIX;
    }
    set IAMDomainUrl(newDomain) {
        this.SERVICE_INFO.IAM_DOMAIN = newDomain;
    }
    get IAMDomainUrl() {
        return this.SERVICE_INFO.IAM_DOMAIN;
    }
    get StratusDomain() {
        return this.SERVICE_INFO.STRATUS_DOMAIN;
    }
    set StratusDomain(stratusDomain) {
        this.SERVICE_INFO.STRATUS_DOMAIN = stratusDomain;
    }
    get SDKVersion() {
        return this.SDK_INFO.VERSION;
    }
    get PollInterval() {
        return this.SDK_INFO.POLL_INTERVAL;
    }
    get PollThreshold() {
        return this.SDK_INFO.POLL_THRESHOLD;
    }
    get ZAID() {
        return this.USER_INFO.CREDENTIALS.ZAID ?? '';
    }
    set ZAID(newValue) {
        this.USER_INFO.CREDENTIALS.ZAID = newValue;
    }
    get ProjectID() {
        return this.USER_INFO.CREDENTIALS.PROJECT_ID || '';
    }
    set ProjectID(newValue) {
        this.USER_INFO.CREDENTIALS.PROJECT_ID = newValue;
    }
    get Initialized() {
        return this.SDK_INFO.INITIALIZED;
    }
    set Initialized(newValue) {
        this.SDK_INFO.INITIALIZED = newValue;
    }
    get CredentialJson() {
        return this.CREDENTIAL_OBJ;
    }
    set CredentialJson(newValue) {
        this.CREDENTIAL_OBJ = newValue;
    }
    get OrgId() {
        return this.USER_INFO.CONFIG.ORG_ID;
    }
    set OrgId(id) {
        this.USER_INFO.CONFIG.ORG_ID = id;
    }
    get ProjectDomain() {
        return this.USER_INFO.CREDENTIALS.PROJECT_DOMAIN;
    }
    set ProjectDomain(id) {
        this.USER_INFO.CREDENTIALS.PROJECT_DOMAIN = id;
    }
    get Environment() {
        return this.SERVICE_INFO.ENVIRONMENT;
    }
    set Environment(env) {
        this.SERVICE_INFO.ENVIRONMENT = env;
    }
    static getInstance() {
        if (ConfigManager.INSTANCE === null)
            ConfigManager.INSTANCE = new ConfigManager();
        return ConfigManager.INSTANCE;
    }
}
exports.ConfigManager = ConfigManager;
ConfigManager.INSTANCE = null;
