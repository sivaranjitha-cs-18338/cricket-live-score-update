"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ZCAuth_instances, _a, _ZCAuth_isValidUser, _ZCAuth_notSignedIn, _ZCAuth_errorMsgHandler, _ZCAuth_getEmailInpErrorDiv, _ZCAuth_trackErrorMsgCnt, _ZCAuth_attachMutationObserver, _ZCAuth_forgotPasswordClickHandle, _ZCAuth_overrideValuesInI18N, _ZCAuth_createIframeAndAttach, _ZCAuth_constructSignOutUrl, _ZCAuth_constructRedirectUrl, _ZCAuth_constructIAMIframeUrl, _ZCAuth_getIAMForgotPasswordURL, _ZCAuth_styleIFrame;
Object.defineProperty(exports, "__esModule", { value: true });
exports.zcAuth = exports.ConfigManager = exports.Auth_Protocol = void 0;
const utils_1 = require("@zcatalyst/utils");
const config_manager_1 = require("./config-manager");
Object.defineProperty(exports, "ConfigManager", { enumerable: true, get: function () { return config_manager_1.ConfigManager; } });
const constants_1 = require("./util/constants");
const enums_1 = require("./util/enums");
Object.defineProperty(exports, "Auth_Protocol", { enumerable: true, get: function () { return enums_1.Auth_Protocol; } });
const errors_1 = require("./util/errors");
const functions_1 = require("./util/functions");
const validators_1 = require("./util/validators");
const urlRegex = /^((https?:\/\/)?[\w.-]+(\.[\w.-]+)+\.?(:\d+)?(\/\S*)?(\?\S+)?)$/;
class ZCAuth {
    constructor() {
        _ZCAuth_instances.add(this);
        this.configManager = config_manager_1.ConfigManager.getInstance();
    }
    async getCredentials() {
        this.configManager.CredentialJson = (await this.makeRequest(`/${constants_1.URL_DIVIDER.RESERVED_URL}/sdk/init`, {
            method: 'GET',
            headers: {
                Accept: 'application/json'
            }
        })).data;
        return this.configManager.CredentialJson;
    }
    async init() {
        if (!this.configManager.Initialized) {
            let credentialJson = (await this.getCredentials());
            credentialJson = credentialJson.hasOwnProperty('credentialQR')
                ? credentialJson['credentialQR']
                : credentialJson;
            for (const requirement of constants_1.REQUIREMENT.INIT_REQUIRE) {
                if (!credentialJson.hasOwnProperty(requirement)) {
                    throw new errors_1.CatalystAuthError('PROPERTY_NOT_FOUND', `Unable to get the property ${[requirement]} from the given credentials.`, 400);
                }
            }
            this.configManager.CredentialJson = credentialJson;
            this.configManager.ZAID = credentialJson?.zaid;
            this.configManager.ProjectID = credentialJson?.project_id;
            this.configManager.IAMDomainUrl = credentialJson?.auth_domain
                ? credentialJson?.auth_domain
                : 'https://accounts.zohoportal.com';
            this.configManager.APIDomain = credentialJson?.api_domain;
            this.configManager.StratusDomain = `-
				${credentialJson?.environment}${credentialJson?.stratus_suffix}`;
            this.configManager.Environment = credentialJson?.environment;
            this.configManager.ProjectDomain = credentialJson?.project_domain;
            this.configManager.IsAppSail = (credentialJson?.is_appsail).toString();
            if (credentialJson?.org_id) {
                this.configManager.OrgId = credentialJson.org_id;
            }
            this.configManager.Initialized = true;
            (0, functions_1.setGlobal)('__catalyst', this.configManager.CredentialJson);
        }
        else {
            console.log('app already initialized!');
            (0, functions_1.setGlobal)('__catalyst', this.configManager.CredentialJson);
        }
    }
    async signIn(id, config = {}) {
        if (!this.configManager.Initialized) {
            await this.init();
        }
        if (config.signin_providers_only) {
            config.signInProvidersOnly = config.signin_providers_only;
        }
        try {
            const isValidUser = await __classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_isValidUser).call(this);
            if (isValidUser) {
                window.location.href = __classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_constructRedirectUrl).call(this, config.redirect_url ?? config.service_url ?? '');
            }
            else {
                await __classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_notSignedIn).call(this, id, config);
            }
        }
        catch (err) {
            await __classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_notSignedIn).call(this, id, config);
        }
    }
    async hostedSignIn() {
        if (!this.configManager.Initialized) {
            await this.init();
        }
        window.location.href = `/${constants_1.URL_DIVIDER.RESERVED_URL}/${constants_1.URL_DIVIDER.AUTH}/${constants_1.URL_DIVIDER.LOGIN}`;
    }
    async getProjectUserDetails(org_id) {
        let url;
        if (!this.configManager.Initialized) {
            await this.init();
        }
        if (typeof org_id !== 'undefined') {
            url = (0, validators_1.applyQueryString)(this.constructUrl() + '/project-user/current', {
                org_id
            });
        }
        else {
            url = this.constructUrl() + '/project-user/current';
        }
        const projectDetails = await this.makeRequest(url, { method: 'GET' });
        return projectDetails.data;
    }
    async publicSignup() {
        if (!this.configManager.Initialized) {
            await this.init();
        }
        const response = await this.makeRequest(`/${constants_1.URL_DIVIDER.RESERVED_URL}/${constants_1.URL_DIVIDER.AUTH}/${constants_1.URL_DIVIDER.PUBLIC_SIGNUP}`, {
            method: 'GET'
        }, { responseType: 'text' });
        return response;
    }
    async changePassword(oldPassword, newPassword) {
        await (0, utils_1.wrapValidatorsWithPromise)(() => {
            (0, utils_1.isNonEmptyString)(oldPassword, 'old_password', true);
            (0, utils_1.isNonEmptyString)(newPassword, 'new_password', true);
        }, errors_1.CatalystAuthError);
        const changePasswordUrl = this.constructUrl() + `/${constants_1.UM_URL_DIVIDER.PROJECT_USER}/${constants_1.URL_DIVIDER.CHANGE_PASSWORD}`;
        const URL = (0, validators_1.applyQueryString)(changePasswordUrl, {
            old_password: oldPassword,
            new_password: newPassword
        });
        const response = await this.makeRequest(URL, {
            method: 'PUT',
            body: null
        });
        return response.data;
    }
    async signOut(redirectURL) {
        if (this.configManager.AuthProtocol === enums_1.Auth_Protocol.JwtTokenProtocol) {
            document.cookie = `${this.configManager.jwtTokenCookieKey}=; path=/; expires=${new Date().toUTCString()};`;
            document.cookie = `user_cred=; path=/; expires=${new Date().toUTCString()};`;
        }
        else {
            if (this.configManager.IsAppSail === 'true') {
                const validUser = await __classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_isValidUser).call(this);
                if (!validUser) {
                    if (redirectURL.startsWith('/')) {
                        redirectURL =
                            this.configManager.CurrentClientPagePort != ''
                                ? `${this.configManager.CurrentClientPageProtocol}//${this.configManager.CurrentClientPageHost}:${this.configManager.CurrentClientPagePort}${redirectURL}`
                                : `${this.configManager.CurrentClientPageProtocol}//${this.configManager.CurrentClientPageHost}${redirectURL}`;
                    }
                    window.location.href = redirectURL;
                }
                try {
                    await this.makeRequest(__classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_constructSignOutUrl).call(this, redirectURL), {
                        method: 'GET'
                    });
                    document.cookie = `CAUTH=; path=/accounts; expires=${new Date().toUTCString()};`;
                    window.location.href = redirectURL;
                }
                catch (err) {
                    window.location.href = __classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_constructSignOutUrl).call(this, redirectURL);
                }
            }
            else {
                window.location.href = __classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_constructSignOutUrl).call(this, redirectURL);
            }
        }
    }
    async signOutUrl(redirectURL) {
        return await this.makeRequest(__classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_constructSignOutUrl).call(this, redirectURL), {
            body: JSON.stringify({ data: { signout_url: __classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_constructSignOutUrl).call(this, redirectURL) } })
        });
    }
    async signUp(body) {
        await (0, functions_1.wrapCheck)(() => {
            (0, validators_1.hasSuffInfo)(body, [constants_1.UM_PROPERTY.LAST_NAME, constants_1.UM_PROPERTY.EMAIL_ID]);
        });
        const data = {};
        data.zaid = this.configManager.ZAID;
        data.platform = (body[constants_1.UM_PROPERTY.PLATFORM] === undefined ? 'web' : body[constants_1.UM_PROPERTY.PLATFORM]);
        if (body[constants_1.UM_PROPERTY.REDIRECT_URL] !== undefined) {
            data.redirect_url = body[constants_1.UM_PROPERTY.REDIRECT_URL];
        }
        const userDetails = {};
        userDetails.last_name = body[constants_1.UM_PROPERTY.LAST_NAME];
        userDetails.email_id = body[constants_1.UM_PROPERTY.EMAIL_ID];
        if (body[constants_1.UM_PROPERTY.FIRST_NAME] !== undefined) {
            userDetails.first_name = body[constants_1.UM_PROPERTY.FIRST_NAME];
        }
        data.user_details = userDetails;
        return await this.makeRequest(`/__catalyst/${this.configManager.ProjectID}/auth/signup`, {
            body: data
        });
    }
    async isUserAuthenticated(org_id) {
        const resp = await this.getProjectUserDetails(org_id);
        if (resp.status === 'success') {
            return resp.data;
        }
        else {
            return false;
        }
    }
    collectZCRFToken() {
        return new Promise((resolve, reject) => {
            try {
                const cookies = document.cookie.split(';');
                for (const cookie of cookies) {
                    const keyVal = cookie.split('=');
                    if (keyVal.length === 2 &&
                        keyVal[0].trim() === constants_1.CSRF_TOKEN_KEY &&
                        keyVal[1].trim().length > 0) {
                        config_manager_1.ConfigManager.getInstance().CsrfToken = keyVal[1].trim();
                        resolve('success');
                        return;
                    }
                }
                resolve('success');
            }
            catch (e) {
                resolve('success');
            }
        });
    }
    loginRedirect(url, isDefault = true) {
        const path = window.location;
        if (url?.length !== 0) {
            if (!url.includes(path.origin)) {
                const regex = /^((https?:\/\/)?[\w.-]+(\.[\w.-]+)+\.?(:\d+)?(\/\S*)?(\?\S+)?)$/;
                if (!regex.test(url)) {
                    url = `${path.origin}${url}`;
                }
            }
        }
        else {
            console.error('redirect url missing.');
            return;
        }
        let service_url = `?service_url=${path.pathname}`;
        if (isDefault) {
            service_url = '';
            path.href = `${url}`;
        }
        else {
            path.href = `${url}${service_url}`;
        }
    }
    signinWithJwt(callbackFn) {
        this.configManager.fetchJwtDetailsCallBack = callbackFn;
        this.configManager.AuthProtocol = enums_1.Auth_Protocol.JwtTokenProtocol;
    }
    async makeRequest(url, options, otherOptions = { responseType: 'json' }) {
        try {
            const response = await fetch(url, options || {});
            let res;
            if (otherOptions.responseType) {
                const responseType = otherOptions.responseType;
                if (responseType === 'text') {
                    res = await response.text();
                }
                else {
                    res = await response.json();
                }
            }
            return {
                status: response?.status,
                data: res,
                message: res?.message || ''
            };
        }
        catch (error) {
            throw new errors_1.CatalystAuthError('CLIENT_AUTH_ERROR', 'Error occured while processing authentication' + error, 400);
        }
    }
    constructUrl() {
        return (0, utils_1.getServicePath)() + `/project/${this.configManager.ProjectID}`;
    }
}
_a = ZCAuth, _ZCAuth_instances = new WeakSet(), _ZCAuth_isValidUser = async function _ZCAuth_isValidUser(org_id) {
    const response = await this.getProjectUserDetails(org_id);
    if (response.status === 'success') {
        return true;
    }
    return false;
}, _ZCAuth_notSignedIn = async function _ZCAuth_notSignedIn(id, config) {
    if (config.signin_providers_only) {
        config.signInProvidersOnly = config.signin_providers_only;
    }
    const publicSignupResp = await this.publicSignup();
    const isPublicSignupEnabled = publicSignupResp.data?.public_signup;
    const signinIframe = __classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_createIframeAndAttach).call(this, id, __classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_constructIAMIframeUrl).call(this, config, isPublicSignupEnabled));
    if (signinIframe) {
        signinIframe.onload = () => {
            const iframeElem = document.getElementById('iam_iframe');
            if (!iframeElem)
                return;
            const iframeDoc = iframeElem.contentWindow?.document;
            if (!iframeDoc)
                return;
            const loginInpElem = iframeDoc.getElementById('login_id');
            if (loginInpElem) {
                loginInpElem.placeholder = constants_1.AUTH_ERROR_MSG.emptyEmailAddress;
            }
            __classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_overrideValuesInI18N).call(this, iframeElem);
            __classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_errorMsgHandler).call(this);
            if (config.signInProvidersOnly) {
                const fieldcontainer = iframeDoc.querySelector('.fieldcontainer');
                const signinContainer = iframeDoc.querySelector('.signin_container');
                const signinBox = iframeDoc.querySelector('.signin_box');
                if (fieldcontainer && signinContainer && signinBox) {
                    fieldcontainer.style.display = 'none';
                    signinContainer.style.minHeight = '320px';
                    signinBox.style.minHeight = '320px';
                    if (!iframeDoc.querySelector('.fed_2show')) {
                        const divElem = document.createElement('div');
                        divElem.innerText = 'No Social Logins available';
                        fieldcontainer?.parentElement?.parentElement?.appendChild(divElem);
                    }
                }
            }
            const forgotPasswordElem = iframeDoc.getElementById('forgotpassword');
            if (forgotPasswordElem) {
                const originalForgotPwd = forgotPasswordElem.querySelector('a');
                if (originalForgotPwd) {
                    originalForgotPwd.onclick = () => __classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_forgotPasswordClickHandle).call(this, id, config);
                }
                const blueForgotPwd = iframeDoc.querySelectorAll('#blueforgotpassword');
                blueForgotPwd.forEach((btn) => {
                    btn.onclick = () => __classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_forgotPasswordClickHandle).call(this, id, config);
                });
            }
            return { status: 200, content: 'success' };
        };
    }
    return {};
}, _ZCAuth_errorMsgHandler = async function _ZCAuth_errorMsgHandler() {
    __classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_attachMutationObserver).call(this, __classPrivateFieldGet(_a, _a, "m", _ZCAuth_getEmailInpErrorDiv).call(_a), __classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_trackErrorMsgCnt));
}, _ZCAuth_getEmailInpErrorDiv = function _ZCAuth_getEmailInpErrorDiv() {
    const iframeElem = document.getElementById('iam_iframe');
    return iframeElem.contentDocument
        ?.getElementById('login_id_container')
        ?.querySelector('.fielderror');
}, _ZCAuth_trackErrorMsgCnt = async function _ZCAuth_trackErrorMsgCnt(mutationList, observer) {
    for (const mutation of mutationList) {
        if (mutation.type === 'attributes' &&
            mutation.target.style.display === 'block') {
            const errorDiv = __classPrivateFieldGet(_a, _a, "m", _ZCAuth_getEmailInpErrorDiv).call(_a);
            if (errorDiv.innerText.toLowerCase().includes(constants_1.AUTH_ERROR_MSG.noAccountIncludes)) {
                errorDiv.innerText = constants_1.AUTH_ERROR_MSG.noAccountMsg;
            }
        }
    }
}, _ZCAuth_attachMutationObserver = function _ZCAuth_attachMutationObserver(elem, callbackFn, config = { attributes: true }) {
    if (callbackFn && elem) {
        const observer = new MutationObserver(callbackFn);
        observer.observe(elem, config);
    }
}, _ZCAuth_forgotPasswordClickHandle = function _ZCAuth_forgotPasswordClickHandle(id, config) {
    const forgotPwdIframe = __classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_createIframeAndAttach).call(this, config.forgot_password_id ?? id, __classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_getIAMForgotPasswordURL).call(this, config));
    if (forgotPwdIframe) {
        forgotPwdIframe.onload = () => {
            const iframeElem = document.getElementById('iam_iframe');
            const iframeDoc = iframeElem.contentWindow?.document;
            const loginInpElem = iframeDoc?.getElementById('login_id');
            loginInpElem.placeholder = constants_1.AUTH_ERROR_MSG.emptyEmailAddress;
            __classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_overrideValuesInI18N).call(this, iframeElem);
        };
    }
}, _ZCAuth_overrideValuesInI18N = function _ZCAuth_overrideValuesInI18N(iframe) {
    if (iframe.contentWindow?.I18N) {
        const IAMi18nData = (iframe.contentWindow?.I18xN)['data'];
        IAMi18nData['IAM.PHONE.ENTER.VALID.MOBILE_NUMBER'] = constants_1.AUTH_ERROR_MSG.emptyEmailAddress;
        IAMi18nData['IAM.NEW.SIGNIN.ENTER.EMAIL.OR.MOBILE'] = constants_1.AUTH_ERROR_MSG.emptyEmailAddress;
    }
}, _ZCAuth_createIframeAndAttach = function _ZCAuth_createIframeAndAttach(id, url) {
    const target = document.getElementById(id);
    if (target === null) {
        throw new errors_1.CatalystAuthError('CLIENT_AUTH_ERROR', `Unable to get element with id : ${id}`);
    }
    else {
        const iframe = document.createElement('iframe');
        iframe.src = url;
        iframe.id = 'iam_iframe';
        __classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_styleIFrame).call(this, iframe);
        target.innerHTML = '';
        target.appendChild(iframe);
        return iframe;
    }
}, _ZCAuth_constructSignOutUrl = function _ZCAuth_constructSignOutUrl(redirectURL) {
    if (redirectURL.startsWith('/')) {
        redirectURL =
            this.configManager.CurrentClientPagePort != ''
                ? `${this.configManager.CurrentClientPageProtocol}/
					/${this.configManager.CurrentClientPageHost}:${this.configManager.CurrentClientPagePort}${redirectURL}`
                : `${this.configManager.CurrentClientPageProtocol}//${this.configManager.CurrentClientPageHost}${redirectURL}`;
    }
    return `/accounts/p/${this.configManager.ZAID}/logout?servicename=ZohoCatalyst&serviceurl=${redirectURL}`;
}, _ZCAuth_constructRedirectUrl = function _ZCAuth_constructRedirectUrl(redirectUrl) {
    const baseRedirectUrl = `${location.protocol}//${location.host}/__catalyst/${this.configManager.ProjectID}/auth/signin-redirect?PROJECT_ID=${this.configManager.ZAID}`;
    if (redirectUrl &&
        !redirectUrl.includes(window.location.origin) &&
        !urlRegex.test(redirectUrl)) {
        redirectUrl = `${window.location.origin}${redirectUrl}`;
    }
    return redirectUrl ? `${baseRedirectUrl}&service_url=${redirectUrl}` : baseRedirectUrl;
}, _ZCAuth_constructIAMIframeUrl = function _ZCAuth_constructIAMIframeUrl(config, isPublicSignupEnabled) {
    const isHideForgotPassword = config.signInProvidersOnly ? true : false;
    const cssUrl = config.css_url ||
        (0, validators_1.applyQueryString)(constants_1.AUTH_STATIC_FILES.URL, {
            file_name: config.signInProvidersOnly
                ? constants_1.AUTH_STATIC_FILES.SIGNIN_WITH_PROVIDERS_ONLY
                : constants_1.AUTH_STATIC_FILES.SIGNIN
        });
    let serviceUrl = config.redirect_url ??
        config.service_url ??
        new URLSearchParams(window.location.search).get('service_url');
    serviceUrl = encodeURIComponent(__classPrivateFieldGet(this, _ZCAuth_instances, "m", _ZCAuth_constructRedirectUrl).call(this, serviceUrl));
    const recoveryUrl = `${location.protocol}//${location.host}/accounts/p/70-${this.configManager.ZAID}/password?servicename=ZohoCatalyst&&serviceurl=${serviceUrl}`;
    const urlParams = {
        css_url: cssUrl,
        portal: this.configManager.ZAID,
        servicename: 'ZohoCatalyst',
        serviceurl: serviceUrl,
        hide_signup: true,
        hide_fs: `${!isPublicSignupEnabled}`,
        dcc: true,
        hide_fp: `${isHideForgotPassword}`,
        recoveryurl: encodeURIComponent(recoveryUrl)
    };
    const baseDomain = `${location.protocol}//${location.host}/accounts/p/${this.configManager.ZAID}/signin`;
    const url = (0, validators_1.applyQueryString)(baseDomain, urlParams);
    return url;
}, _ZCAuth_getIAMForgotPasswordURL = function _ZCAuth_getIAMForgotPasswordURL(config) {
    const iframeElem = document.getElementById('iam_iframe');
    const iframeDoc = iframeElem.contentWindow?.document;
    const loginInpElem = iframeDoc?.getElementById('login_id');
    const cssUrl = config.forgot_password_css_url
        ? config.forgot_password_css_url
        : (0, validators_1.applyQueryString)(constants_1.AUTH_STATIC_FILES.URL, { file_name: constants_1.AUTH_STATIC_FILES.FORGOT_PWD });
    const queryParams = {
        css_url: cssUrl,
        portal: this.configManager.ZAID,
        servicename: 'ZohoCatalyst',
        serviceurl: encodeURIComponent(`${location.protocol}//${location.host}/`),
        hide_signup: true,
        dcc: true,
        LOGIN_ID: encodeURIComponent(loginInpElem.value.toString())
    };
    const url = (0, validators_1.applyQueryString)(`${location.protocol}//${location.host}/accounts/p/${this.configManager.ZAID}/password`, queryParams);
    return url;
}, _ZCAuth_styleIFrame = function _ZCAuth_styleIFrame(iframe) {
    iframe.style.height = '100%';
    iframe.style.width = '100%';
    iframe.style.border = 'none';
};
const zcAuth = new ZCAuth();
exports.zcAuth = zcAuth;
